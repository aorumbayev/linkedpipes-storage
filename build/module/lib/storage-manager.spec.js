import test from 'ava';
import auth from 'solid-auth-cli';
import uuid from 'uuid';
import { SOLID_PASSWORD, SOLID_PROVIDER_URL, SOLID_USERNAME, SOLID_WEBID } from './constants';
import { AccessControlConfig, AccessControlNamespace, ResourceConfig, SolidResourceType, StorageFileManager } from './storage-manager';
let session;
const fileConfigurationResource = new ResourceConfig({
    path: `https://tester2.lpapps.co:8443`,
    title: `${uuid.v4()}.txt`,
    type: SolidResourceType.File,
    contentType: 'text/plain',
    body: 'This is a test text file'
}, SOLID_WEBID);
const fileConfigurationResourceRenamed = new ResourceConfig({
    path: fileConfigurationResource.resource.path,
    title: `${uuid.v4()}_renamed.txt`,
    type: fileConfigurationResource.resource.type
}, fileConfigurationResource.webID);
const folderConfigurationResource = new ResourceConfig({
    path: `https://tester2.lpapps.co:8443`,
    title: uuid.v4(),
    type: SolidResourceType.Folder
}, SOLID_WEBID);
const folderConfigurationResourceRenamed = new ResourceConfig({
    path: folderConfigurationResource.resource.path,
    title: uuid.v4() + '_renamed',
    type: folderConfigurationResource.resource.type
}, folderConfigurationResource.webID);
async function createResource(t, input, expected) {
    const result = await StorageFileManager.createResource(input);
    t.is(result.status, expected);
}
async function deleteResource(t, input, expected) {
    const result = await StorageFileManager.deleteResource(input);
    t.is(result.status, expected);
}
async function resourceExists(t, input, expected) {
    const result = await StorageFileManager.resourceExists(input);
    t.is(result.status, expected);
}
async function updateACL(t, input, expected) {
    const result = await StorageFileManager.updateACL(input);
    t.is(result.status, expected);
}
test.before(async () => {
    session = await auth.currentSession();
    if (!session) {
        session = await auth.login({
            idp: SOLID_PROVIDER_URL,
            password: SOLID_PASSWORD,
            username: SOLID_USERNAME
        });
    }
});
test.serial('createFolderResource', createResource, folderConfigurationResource, 201);
test.serial('folderResourceExists', resourceExists, folderConfigurationResource.fullPath(), 200);
test.serial('renameFolderResource', async (t) => {
    const response = await StorageFileManager.renameResource(folderConfigurationResource, folderConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('renameSameFolderResource', async (t) => {
    const response = await StorageFileManager.renameResource(folderConfigurationResourceRenamed, folderConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('folderResourceDoesNotExists', resourceExists, folderConfigurationResource.fullPath(), 404);
test.serial('folderResourceUpdateACL', updateACL, new AccessControlConfig({
    ...folderConfigurationResourceRenamed.resource,
    isPublic: true
}, [AccessControlNamespace.Read, AccessControlNamespace.Write], SOLID_WEBID), 201);
test.serial('deleteFolderResource', deleteResource, folderConfigurationResourceRenamed, 200);
test.serial('folderResourceDoesNotExist', resourceExists, fileConfigurationResource.fullPath(), 404);
test.serial('createFileResource', createResource, fileConfigurationResource, 201);
test.serial('fileResourceExists', resourceExists, fileConfigurationResource.fullPath(), 200);
test.serial('renameFileResource', async (t) => {
    const response = await StorageFileManager.renameResource(fileConfigurationResource, fileConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('renameSameFileResource', async (t) => {
    const response = await StorageFileManager.renameResource(fileConfigurationResourceRenamed, fileConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('fileResourceDoesNotExists', resourceExists, fileConfigurationResource.fullPath(), 404);
test.serial('fileResourceUpdateACL', updateACL, new AccessControlConfig({
    ...fileConfigurationResourceRenamed.resource,
    isPublic: true
}, [AccessControlNamespace.Read, AccessControlNamespace.Write], SOLID_WEBID), 201);
test.serial('deleteFileResource', deleteResource, fileConfigurationResourceRenamed, 200);
test.serial('fileResourceDoesNotExist', resourceExists, fileConfigurationResourceRenamed.fullPath(), 404);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1tYW5hZ2VyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3N0b3JhZ2UtbWFuYWdlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLElBQUksTUFBTSxnQkFBZ0IsQ0FBQztBQUNsQyxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUNMLGNBQWMsRUFDZCxrQkFBa0IsRUFDbEIsY0FBYyxFQUNkLFdBQVcsRUFDWixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQ0wsbUJBQW1CLEVBQ25CLHNCQUFzQixFQUN0QixjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLGtCQUFrQixFQUNuQixNQUFNLG1CQUFtQixDQUFDO0FBRTNCLElBQUksT0FBTyxDQUFDO0FBRVosTUFBTSx5QkFBeUIsR0FBbUIsSUFBSSxjQUFjLENBQ2xFO0lBQ0UsSUFBSSxFQUFFLGdDQUFnQztJQUN0QyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQU07SUFDekIsSUFBSSxFQUFFLGlCQUFpQixDQUFDLElBQUk7SUFDNUIsV0FBVyxFQUFFLFlBQVk7SUFDekIsSUFBSSxFQUFFLDBCQUEwQjtDQUNqQyxFQUNELFdBQVcsQ0FDWixDQUFDO0FBRUYsTUFBTSxnQ0FBZ0MsR0FBbUIsSUFBSSxjQUFjLENBQ3pFO0lBQ0UsSUFBSSxFQUFFLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJO0lBQzdDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsY0FBYztJQUNqQyxJQUFJLEVBQUUseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUk7Q0FDOUMsRUFDRCx5QkFBeUIsQ0FBQyxLQUFLLENBQ2hDLENBQUM7QUFFRixNQUFNLDJCQUEyQixHQUFtQixJQUFJLGNBQWMsQ0FDcEU7SUFDRSxJQUFJLEVBQUUsZ0NB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