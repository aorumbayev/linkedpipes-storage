import test from 'ava';
import uuid from 'uuid';
import { StorageTestAuthenticationManager } from './auth-manager';
import { logger } from './common';
import { SOLID_PASSWORD, SOLID_PROVIDER_URL, SOLID_USERNAME, SOLID_WEBID } from './constants';
import { AccessControlConfig, AccessControlNamespace, ResourceConfig, SolidResourceType, StorageFileManager } from './storage-manager';
let session;
const fileConfigurationResource = new ResourceConfig({
    path: `https://tester2.lpapps.co:8443`,
    title: `${uuid.v4()}.txt`,
    type: SolidResourceType.File,
    contentType: 'text/plain',
    body: 'This is a test text file'
}, SOLID_WEBID);
const fileConfigurationResourceRenamed = new ResourceConfig({
    path: fileConfigurationResource.resource.path,
    title: `${uuid.v4()}_renamed.txt`,
    type: fileConfigurationResource.resource.type
}, fileConfigurationResource.webID);
const folderConfigurationResource = new ResourceConfig({
    path: `https://tester2.lpapps.co:8443`,
    title: uuid.v4(),
    type: SolidResourceType.Folder
}, SOLID_WEBID);
const folderConfigurationResourceRenamed = new ResourceConfig({
    path: folderConfigurationResource.resource.path,
    title: uuid.v4() + '_renamed',
    type: folderConfigurationResource.resource.type
}, folderConfigurationResource.webID);
async function createResource(t, input, expected) {
    const result = await StorageFileManager.createResource(input);
    logger.info(result.text());
    t.is(result.status, expected);
}
async function deleteResource(t, input, expected) {
    const result = await StorageFileManager.deleteResource(input);
    t.is(result.status, expected);
}
async function resourceExists(t, input, expected) {
    const result = await StorageFileManager.resourceExists(input);
    t.is(result.status, expected);
}
async function updateACL(t, input, expected) {
    const result = await StorageFileManager.updateACL(input);
    t.is(result.status, expected);
}
test.before(async () => {
    session = await StorageTestAuthenticationManager.currentSession();
    if (!session) {
        session = await StorageTestAuthenticationManager.login({
            idp: SOLID_PROVIDER_URL,
            password: SOLID_PASSWORD,
            username: SOLID_USERNAME
        });
        logger.info('Authentication response: ', session.webID);
    }
});
test.serial('createFolderResource', createResource, folderConfigurationResource, 201);
test.serial('folderResourceExists', resourceExists, folderConfigurationResource.fullPath(), 200);
test.serial('renameFolderResource', async (t) => {
    const response = await StorageFileManager.renameResource(folderConfigurationResource, folderConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('renameSameFolderResource', async (t) => {
    const response = await StorageFileManager.renameResource(folderConfigurationResourceRenamed, folderConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('folderResourceDoesNotExists', resourceExists, folderConfigurationResource.fullPath(), 404);
test.serial('folderResourceUpdateACL', updateACL, new AccessControlConfig({
    ...folderConfigurationResourceRenamed.resource,
    isPublic: true
}, [AccessControlNamespace.Read, AccessControlNamespace.Write], SOLID_WEBID), 201);
test.serial('deleteFolderResource', deleteResource, folderConfigurationResourceRenamed, 200);
test.serial('folderResourceDoesNotExist', resourceExists, fileConfigurationResource.fullPath(), 404);
test.serial('createFileResource', createResource, fileConfigurationResource, 201);
test.serial('fileResourceExists', resourceExists, fileConfigurationResource.fullPath(), 200);
test.serial('renameFileResource', async (t) => {
    const response = await StorageFileManager.renameResource(fileConfigurationResource, fileConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('renameSameFileResource', async (t) => {
    const response = await StorageFileManager.renameResource(fileConfigurationResourceRenamed, fileConfigurationResourceRenamed);
    t.is(response.status, 200);
});
test.serial('fileResourceDoesNotExists', resourceExists, fileConfigurationResource.fullPath(), 404);
test.serial('fileResourceUpdateACL', updateACL, new AccessControlConfig({
    ...fileConfigurationResourceRenamed.resource,
    isPublic: true
}, [AccessControlNamespace.Read, AccessControlNamespace.Write], SOLID_WEBID), 201);
test.serial('deleteFileResource', deleteResource, fileConfigurationResourceRenamed, 200);
test.serial('fileResourceDoesNotExist', resourceExists, fileConfigurationResourceRenamed.fullPath(), 404);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZS1tYW5hZ2VyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3N0b3JhZ2UtbWFuYWdlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLEtBQUssQ0FBQztBQUN2QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLGtCQUFrQixFQUNsQixjQUFjLEVBQ2QsV0FBVyxFQUNaLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsc0JBQXNCLEVBQ3RCLGNBQWMsRUFDZCxpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ25CLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsSUFBSSxPQUFPLENBQUM7QUFFWixNQUFNLHlCQUF5QixHQUFtQixJQUFJLGNBQWMsQ0FDbEU7SUFDRSxJQUFJLEVBQUUsZ0NBQWdDO0lBQ3RDLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTTtJQUN6QixJQUFJLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtJQUM1QixXQUFXLEVBQUUsWUFBWTtJQUN6QixJQUFJLEVBQUUsMEJBQTBCO0NBQ2pDLEVBQ0QsV0FBVyxDQUNaLENBQUM7QUFFRixNQUFNLGdDQUFnQyxHQUFtQixJQUFJLGNBQWMsQ0FDekU7SUFDRSxJQUFJLEVBQUUseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUk7SUFDN0MsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxjQUFjO0lBQ2pDLElBQUksRUFBRSx5QkFBeUIsQ0FBQyxRQUFRLENBQUMsSUFBSTtDQUM5QyxFQUNELHlCQUF5QixDQUFDLEtBQUssQ0FDaEMsQ0FBQztBQUVG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